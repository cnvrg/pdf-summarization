import os
import PyPDF2

os.environ["USE_TORCH"] = "1"
import torch
from doctr.io import DocumentFile
from doctr.models import ocr_predictor
import logging
import numpy as np
from operator import itemgetter
import textract

if torch.cuda.is_available():
    predictor = ocr_predictor(pretrained=True).cuda()
else:
    predictor = ocr_predictor(pretrained=True)


def stitch(page):
    """
    This function constructs meaningful text by appending text from various words and lines detected.

    Args:
        - This function takes a dictionary of dictionaries generated by 
          doctr representing pages using blocks, lines and words. 
          
    Returns: 
        - A string containing text in the page.
    """
    out_txt = ""
    for block in page["blocks"]:
        for line in block["lines"]:
            for word in line["words"]:
                out_txt += word["value"] + " "
    return out_txt


def _process_file_ocr(file_path, todo, output):
    """

    This function does ocr on pdf pages that are requested.

    Args:
        - Filepath of the pdf
        - A list containing numbers of the pages we want to do ocr on
        - A dictionary in which to add the output of the pages.
    
    Returns:
        - A dictionary given as input with added text from ocr
    """
    if str(file_path).lower().endswith(".pdf"):
        doc = DocumentFile.from_pdf(file_path)
    else:
        doc = DocumentFile.from_images(file_path)
    if len(todo) == 1:
        out = predictor([doc[todo[0]]])
    else:
        out = predictor(list((itemgetter(*todo)(doc))))
    export = out.export()

    for page, pagenumber in zip(export["pages"], todo):
        output[pagenumber] = stitch(page)
    return output


def _process_file_pdf(file_path):
    """
    This function extracts text from the pdf.
    
    Args:
        - Filepath of the pdf.
    
    Returns:
        - A dictionary containing extracted text from pdf with keys 
          representing each page and values representing text from each page.
    """
    pdfFileObj = open(file_path, "rb")
    # The pdfReader variable is a readable object that will be parsed.
    pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
    # Discerning the number of pages will allow us to parse through all the pages.
    num_pages = pdfReader.numPages
    count = 0
    output = {}
    # The while loop will read each page.
    while count < num_pages:
        pageObj = pdfReader.getPage(count)
        output[count] = pageObj.extractText()
        count += 1
    return output


def extract_pdf(filepath):
    """
    This function takes pdf filepath as input and extracts text from that pdf.
    It extracts text from each page where possible and for pages from which extracted
    text is empty it does ocr.

    Args:
        - filepath of the pdf

    Returns:
        - A dictionary containing extracted text from pdf with keys 
          representing each page and values representing text from each page.
    """
    output = _process_file_pdf(filepath)

    todoocr = []

    for page in output.keys():
        if output[page] == "":
            todoocr.append(page)

    if len(todoocr) != 0:
        print("running ocr for page numbers: ", todoocr)
        output = _process_file_ocr(filepath, todoocr, output)

    return output


def extract_txt(filepath):
    """
    The function filepath as input and returs raw text as output
    Args: 
        - Filepath
    Return:
        - Raw Text
    """
    with open(filepath, 'r') as file:
        output = file.read().replace('\n', '')
    return output


def extract_doc_docx(filepath):
    """
    The function filepath as input and returs raw text as output
    Args: 
        - Filepath
    Return:
        - Raw Text
    """
    text = textract.process(filepath)
    output = text.decode("utf-8") 
    return output


def master_extractor(filepath):
    if(filepath.endswith(".pdf")):
        text = extract_pdf(filepath)    
    elif(filepath.endswith(".txt")):
        text = extract_txt(filepath)
        text = {0: text}
    elif(filepath.endswith(".docx") or filepath.endswith(".doc")):
        text = extract_doc_docx(filepath)
        text = {0: text}
    else:
        print(filepath, " is not a supported file type")
        return None
    return text
